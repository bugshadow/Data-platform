// Animation 3D
const scene = new THREE.Scene(); // Cr√©e une sc√®ne 3D
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); // Cr√©e une cam√©ra perspective
const renderer = new THREE.WebGLRenderer({
    canvas: document.getElementById('animation-bg'), // Utilise le canvas existant pour le rendu
    antialias: true // Active l'antialiasing pour un rendu plus lisse
});
renderer.setSize(window.innerWidth, window.innerHeight); // D√©finit la taille du rendu
renderer.setPixelRatio(window.devicePixelRatio); // Ajuste le ratio de pixels pour les √©crans haute r√©solution

// Cr√©ation des particules
const particlesGeometry = new THREE.BufferGeometry(); // Cr√©e une g√©om√©trie pour les particules
const particlesCount = 2000; // Nombre de particules
const posArray = new Float32Array(particlesCount * 3); // Tableau pour stocker les positions des particules

for(let i = 0; i < particlesCount * 3; i++) {
    posArray[i] = (Math.random() - 0.5) * 8; // Position al√©atoire pour chaque particule
}

particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3)); // D√©finit l'attribut de position pour la g√©om√©trie

const particlesMaterial = new THREE.PointsMaterial({
    size: 0.005, // Taille des particules
    color: '#4A90E2', // Couleur des particules
    transparent: true, // Rend le mat√©riau transparent
    opacity: 0.8, // Opacit√© des particules
    blending: THREE.AdditiveBlending // Mode de m√©lange pour un effet de lumi√®re
});

const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial); // Cr√©e un maillage de particules
scene.add(particlesMesh); // Ajoute le maillage √† la sc√®ne

camera.position.z = 3; // Positionne la cam√©ra

let mouseX = 0;
let mouseY = 0;
let targetX = 0;
let targetY = 0;

document.addEventListener('mousemove', (event) => {
    mouseX = (event.clientX - window.innerWidth / 2); // Calcule la position X de la souris
    mouseY = (event.clientY - window.innerHeight / 2); // Calcule la position Y de la souris
});

function animate() {
    requestAnimationFrame(animate); // Boucle d'animation

    targetX = mouseX * 0.001; // Ajuste la cible X en fonction de la souris
    targetY = mouseY * 0.001; // Ajuste la cible Y en fonction de la souris

    particlesMesh.rotation.y += 0.01 * (targetX - particlesMesh.rotation.y); // Fait pivoter les particules autour de l'axe Y
    particlesMesh.rotation.x += 0.01 * (targetY - particlesMesh.rotation.x); // Fait pivoter les particules autour de l'axe X

    renderer.render(scene, camera); // Rend la sc√®ne avec la cam√©ra
}

window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight; // Ajuste l'aspect de la cam√©ra
    camera.updateProjectionMatrix(); // Met √† jour la matrice de projection de la cam√©ra
    renderer.setSize(window.innerWidth, window.innerHeight); // Ajuste la taille du rendu
});

animate(); // D√©marre l'animation

// Animation du texte
const textElement = document.getElementById('animated-text'); // R√©cup√®re l'√©l√©ment texte
const text = "Analyseur de Donn√©es"; // Texte √† animer
let index = 0;
let isDeleting = false;

function typeText() {
    const currentText = textElement.innerText;

    if (!isDeleting) {
        // Ajouter une lettre
        textElement.innerText = text.slice(0, index + 1);
        index++;
        if (index === text.length) {
            isDeleting = true;
            setTimeout(typeText, 1000); // Pause avant de supprimer
        } else {
            setTimeout(typeText, 100); // Vitesse d'√©criture
        }
    } else {
        // Supprimer une lettre
        textElement.innerText = text.slice(0, index - 1);
        index--;
        if (index === 0) {
            isDeleting = false;
            setTimeout(typeText, 500); // Pause avant de r√©√©crire
        } else {
            setTimeout(typeText, 50); // Vitesse de suppression
        }
    }
}

// D√©marrer l'animation du texte
typeText();

// Gestion du mode sombre/clair
const themeToggle = document.getElementById('theme-toggle'); // R√©cup√®re le bouton de bascule de th√®me
const body = document.body;

function setTheme(theme) {
    body.setAttribute('data-theme', theme); // D√©finit le th√®me sur le body
    localStorage.setItem('theme', theme); // Sauvegarde le th√®me dans le localStorage
    themeToggle.textContent = theme === 'dark' ? '‚òÄÔ∏è' : 'üåô'; // Change l'ic√¥ne du bouton
}

function toggleTheme() {
    const currentTheme = body.getAttribute('data-theme'); // R√©cup√®re le th√®me actuel
    setTheme(currentTheme === 'dark' ? 'light' : 'dark'); // Bascule entre les th√®mes
}

// Appliquer le th√®me au chargement
const savedTheme = localStorage.getItem('theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
setTheme(savedTheme); // Applique le th√®me sauvegard√© ou par d√©faut

// √âcouteur d'√©v√©nement pour le bouton de bascule
themeToggle.addEventListener('click', toggleTheme);

// Gestion du cercle utilisateur et du menu d√©roulant
const userCircle = document.getElementById('user-circle'); // R√©cup√®re le cercle utilisateur
const userDropdown = document.getElementById('user-dropdown'); // R√©cup√®re le menu d√©roulant

userCircle.addEventListener('click', () => {
    userDropdown.style.display = userDropdown.style.display === 'block' ? 'none' : 'block'; // Bascule l'affichage du menu
});

// Fermer le menu d√©roulant si on clique ailleurs
document.addEventListener('click', (event) => {
    if (!userCircle.contains(event.target)) {
        userDropdown.style.display = 'none'; // Cache le menu si on clique en dehors
    }
});

// Logique de l'application
const fileInput = document.getElementById('csv-input'); // R√©cup√®re l'input de fichier
const uploadBtn = document.getElementById('upload-btn'); // R√©cup√®re le bouton d'upload
const downloadBtn = document.getElementById('download-btn'); // R√©cup√®re le bouton de t√©l√©chargement
const columnSelect = document.getElementById('column-select'); // R√©cup√®re le s√©lecteur de colonne
const vizColumnSelect = document.getElementById('viz-column-select'); // R√©cup√®re le s√©lecteur de colonne pour la visualisation
const statsContainer = document.getElementById('stats-container'); // R√©cup√®re le conteneur des statistiques
const vizContainer = document.getElementById('visualization'); // R√©cup√®re le conteneur de visualisation
const dataPreview = document.getElementById('data-preview'); // R√©cup√®re l'aper√ßu des donn√©es
const loader = document.getElementById('loader'); // R√©cup√®re l'indicateur de chargement
const calculateStatsBtn = document.getElementById('calculate-stats-btn'); // R√©cup√®re le bouton de calcul des statistiques
const displayDataBtn = document.getElementById('display-data-btn'); // R√©cup√®re le bouton d'affichage des donn√©es
const generateVizBtn = document.getElementById('generate-viz-btn'); // R√©cup√®re le bouton de g√©n√©ration de visualisation
const vizTypeSelect = document.getElementById('viz-type'); // R√©cup√®re le s√©lecteur de type de visualisation
const noDataMessage = document.getElementById('no-data-message'); // R√©cup√®re le message "Aucune donn√©e"
const noVizMessage = document.getElementById('no-viz-message'); // R√©cup√®re le message "Aucune visualisation"

function showLoader() {
    loader.style.display = 'block'; // Affiche l'indicateur de chargement
}

function hideLoader() {
    loader.style.display = 'none'; // Cache l'indicateur de chargement
}

function handleFileUpload() {
    const file = fileInput.files[0]; // R√©cup√®re le fichier s√©lectionn√©
    if (!file) {
        alert("Aucun fichier s√©lectionn√©.");
        return;
    }

    if (file.type !== "text/csv" && !file.name.endsWith('.csv')) {
        alert("Veuillez s√©lectionner un fichier CSV valide.");
        return;
    }

    showLoader();

    const formData = new FormData();
    formData.append('csv_file', file); // Ajoute le fichier au formulaire

    fetch('/upload_file/', {
        method: 'POST',
        body: formData,
        headers: {
            'X-CSRFToken': getCookie('csrftoken') // Ajoute le token CSRF pour la s√©curit√©
        }
    })
    .then(response => response.json())
    .then(data => {
        hideLoader();
        if (data.error) {
            alert(data.error);
            return;
        }

        // Mettre √† jour les s√©lecteurs de colonnes
        columnSelect.innerHTML = '<option value="">S√©lectionnez une colonne</option>';
        vizColumnSelect.innerHTML = '<option value="">S√©lectionnez une colonne</option>';
        data.columns.forEach(column => {
            const option = document.createElement('option');
            option.value = column.name;
            option.textContent = column.name;
            columnSelect.appendChild(option.cloneNode(true));
            vizColumnSelect.appendChild(option);
        });

        // Activer les s√©lecteurs et les boutons
        columnSelect.disabled = false;
        vizColumnSelect.disabled = false;
        downloadBtn.disabled = false;
        vizTypeSelect.disabled = false;
        generateVizBtn.disabled = false;

        // Afficher l'aper√ßu des donn√©es avec les colonnes dynamiques
        updateDataPreview(data.preview, data.columns.map(column => column.name));

        // Afficher un message de succ√®s
        alert('Fichier CSV import√© avec succ√®s !');
    })
    .catch(error => {
        hideLoader();
        alert('Erreur lors de la lecture du fichier CSV : ' + error.message);
    });
}

function updateDataPreview(preview, columns) {
    const tableHead = document.querySelector('.styled-table thead');
    const tableBody = document.querySelector('.styled-table tbody');

    // Mettre √† jour les en-t√™tes du tableau
    tableHead.innerHTML = `
        <tr>
            <th>#</th>
            ${columns.map(column => `<th>${column}</th>`).join('')}
        </tr>
    `;

    // Mettre √† jour le corps du tableau
    tableBody.innerHTML = preview;

    // Afficher ou masquer le message "Aucune donn√©e"
    if (preview.trim() === "") {
        noDataMessage.style.display = 'block';
    } else {
        noDataMessage.style.display = 'none';
    }
}

function handleCalculateStats() {
    const selectedColumn = columnSelect.value;
    if (!selectedColumn) return;

    showLoader();

    const data = { column: selectedColumn };

    const startRow = document.getElementById('start-row').value;
    const endRow = document.getElementById('end-row').value;
    if (startRow && endRow) {
        data.startIndex = startRow;
        data.endIndex = endRow;
    }

    fetch('/get_stats/', {
        method: 'POST',
        body: JSON.stringify(data),
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCookie('csrftoken')
        }
    })
    .then(response => response.json())
    .then(data => {
        hideLoader();
        if (data.error) {
            alert(data.error);
            return;
        }

        // Mettre √† jour les statistiques
        statsContainer.innerHTML = '';
        if (data.type === 'numeric') {
            statsContainer.innerHTML = `
                <div class="stat-card">
                    <div class="stat-value">${data.mean.toFixed(2)}</div>
                    <div class="stat-label">Moyenne</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${data.median.toFixed(2)}</div>
                    <div class="stat-label">M√©diane</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${data.std.toFixed(2)}</div>
                    <div class="stat-label">√âcart-type</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${data.min.toFixed(2)}</div>
                    <div class="stat-label">Minimum</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${data.max.toFixed(2)}</div>
                    <div class="stat-label">Maximum</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${data.q1.toFixed(2)}</div>
                    <div class="stat-label">Premier quartile (Q1)</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${data.q3.toFixed(2)}</div>
                    <div class="stat-label">Troisi√®me quartile (Q3)</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${data.skewness.toFixed(2)}</div>
                    <div class="stat-label">Asym√©trie (Skewness)</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${data.kurtosis.toFixed(2)}</div>
                    <div class="stat-label">Kurtosis</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${data.missing_values}</div>
                    <div class="stat-label">Valeurs manquantes</div>
                </div>
            `;
        } else {
            statsContainer.innerHTML = `
                <div class="stat-card">
                    <div class="stat-value">${data.unique_count}</div>
                    <div class="stat-label">Valeurs uniques</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${data.most_common[0].value}</div>
                    <div class="stat-label">Valeur la plus fr√©quente</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${data.most_common[0].count}</div>
                    <div class="stat-label">Fr√©quence</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${data.missing_values}</div>
                    <div class="stat-label">Valeurs manquantes</div>
                </div>
            `;
        }
    })
    .catch(error => {
        hideLoader();
        alert('Erreur lors de la r√©cup√©ration des statistiques : ' + error.message);
    });
}

function handleDisplayData() {
    const rowIndex = document.getElementById('row-index').value;
    const columnName = document.getElementById('column-name').value;

    if (!rowIndex && !columnName) {
        alert("Veuillez entrer un index de ligne ou un nom de colonne.");
        return;
    }

    showLoader();

    const data = {};
    if (rowIndex) data.rowIndex = rowIndex;
    if (columnName) data.columnName = columnName;

    fetch('/display_data/', {
        method: 'POST',
        body: JSON.stringify(data),
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCookie('csrftoken')
        }
    })
    .then(response => response.json())
    .then(data => {
        hideLoader();
        if (data.error) {
            alert(data.error);
            return;
        }

        // Afficher les donn√©es dans l'aper√ßu
        const tableBody = document.querySelector('.styled-table tbody');
        if (data.row_data) {
            tableBody.innerHTML = data.row_data;
        } else if (data.column_data) {
            tableBody.innerHTML = data.column_data;
        }

        // Afficher ou masquer le message "Aucune donn√©e"
        if (tableBody.innerHTML.trim() === "") {
            noDataMessage.style.display = 'block';
        } else {
            noDataMessage.style.display = 'none';
        }
    })
    .catch(error => {
        hideLoader();
        alert('Erreur lors de la r√©cup√©ration des donn√©es : ' + error.message);
    });
}

function handleGenerateVisualization() {
    const selectedColumn = vizColumnSelect.value || columnSelect.value; // Utiliser la colonne s√©lectionn√©e ou la premi√®re colonne par d√©faut
    const selectedVizType = vizTypeSelect.value;
    if (!selectedColumn || !selectedVizType) return;

    showLoader();

    fetch('/get_visualization/', {
        method: 'POST',
        body: JSON.stringify({ column: selectedColumn, type: selectedVizType }),
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCookie('csrftoken')
        }
    })
    .then(response => response.json())
    .then(data => {
        hideLoader();
        if (data.error) {
            alert(data.error);
            return;
        }

        // Mettre √† jour la visualisation
        Plotly.newPlot(vizContainer, JSON.parse(data.plot));
        noVizMessage.style.display = 'none';
    })
    .catch(error => {
        hideLoader();
        alert('Erreur lors de la g√©n√©ration de la visualisation : ' + error.message);
        noVizMessage.style.display = 'block';
    });
}

function handleDownload() {
    window.location.href = '/download_csv/'; // Redirige vers l'URL de t√©l√©chargement
}

function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

// √âcouteurs d'√©v√©nements
uploadBtn.addEventListener('click', handleFileUpload); // G√®re l'upload de fichier
calculateStatsBtn.addEventListener('click', handleCalculateStats); // G√®re le calcul des statistiques
displayDataBtn.addEventListener('click', handleDisplayData); // G√®re l'affichage des donn√©es
generateVizBtn.addEventListener('click', handleGenerateVisualization); // G√®re la g√©n√©ration de visualisation
downloadBtn.addEventListener('click', handleDownload); // G√®re le t√©l√©chargement du fichier CSV